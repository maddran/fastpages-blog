{
  
    
        "post0": {
            "title": "Title",
            "content": ". import requests import pandas as pd from pandas import json_normalize from datetime import datetime from time import sleep import requests def call_nhl(startSeason, endSeason=None): if not endSeason: endSeason = startSeason headers = { &#39;authority&#39;: &#39;api.nhle.com&#39;, &#39;user-agent&#39;: &#39;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&#39;, &#39;accept&#39;: &#39;*/*&#39;, &#39;origin&#39;: &#39;http://www.nhl.com&#39;, &#39;sec-fetch-site&#39;: &#39;cross-site&#39;, &#39;sec-fetch-mode&#39;: &#39;cors&#39;, &#39;sec-fetch-dest&#39;: &#39;empty&#39;, &#39;referer&#39;: &#39;http://www.nhl.com/&#39;, &#39;accept-language&#39;: &#39;en-US,en;q=0.9&#39;, } params = ( (&#39;isAggregate&#39;, &#39;false&#39;), (&#39;isGame&#39;, &#39;true&#39;), (&#39;sort&#39;, &#39;[{&quot;property&quot;:&quot;gameDate&quot;,&quot;direction&quot;:&quot;DESC&quot;}]&#39;), (&#39;start&#39;, &#39;0&#39;), (&#39;limit&#39;, &#39;0&#39;), (&#39;factCayenneExp&#39;, &#39;gamesPlayed&gt;=1&#39;), (&#39;cayenneExp&#39;, f&#39;gameTypeId=2 and seasonId&lt;={endSeason} and seasonId&gt;={startSeason}&#39;), ) response = requests.get(&#39;https://api.nhle.com/stats/rest/en/team/summary&#39;, headers=headers, params=params) return response def get_gameData(startYear, numSeasons): seasons = [f&quot;{startYear+i}{startYear+i+1}&quot; for i in range(numSeasons)] rows=0 res = {} for s in seasons: response = call_nhl(s) if response: response = response.json() rows+=len(response[&#39;data&#39;]) df = pd.json_normalize(response[&#39;data&#39;]) res[s] = df print(f&quot;Number of games grabbed for {s} = {len(response[&#39;data&#39;])}. Total = {rows}&quot;) else: print(&quot;ERROR&quot;) return res def rolling_aggregate(df, window = 3): res = {} roll_sum = [&#39;gamesPlayed&#39;, &#39;goalsAgainst&#39;, &#39;goalsFor&#39;, &#39;losses&#39;, &#39;otLosses&#39;, &#39;points&#39;, &#39;regulationAndOtWins&#39;, &#39;winsInShootout&#39;] roll_mean = [&#39;goalsForPerGame&#39;, &#39;goalsAgainstPerGame&#39;, &#39;shotsForPerGame&#39;, &#39;shotsAgainstPerGame&#39;] cumsum = [&#39;gamesPlayed&#39;, &#39;points&#39;, &#39;goalsFor&#39;, &#39;goalsAgainst&#39;] df = df.fillna(0) res = df[roll_sum].rolling(window).sum() res = res.merge(df[roll_mean].rolling(window).mean(), left_index=True, right_index = True) res.columns = [f&quot;rolling_{col}&quot; for col in res.columns] res[[f&quot;cum_{col}&quot; for col in cumsum]] = df[cumsum].cumsum() res.index = df[&#39;gameId&#39;] res = res[sorted(res.columns)] return res def home_road(df, teamLU): res = {} res[&#39;home&#39;] = df[df[&#39;homeRoad&#39;]==&#39;H&#39;][&#39;teamId&#39;].values[0] res[&#39;road&#39;] = df[df[&#39;homeRoad&#39;]==&#39;R&#39;][&#39;teamId&#39;].values[0] res[&#39;homeName&#39;] = teamLU[res[&#39;home&#39;]] res[&#39;roadName&#39;] = teamLU[res[&#39;road&#39;]] return pd.Series(res, index=res.keys()) def process_data(raw_data): data = {} for season, df in raw_data.items(): df[&#39;gameDate&#39;] = pd.to_datetime(df[&#39;gameDate&#39;]) df[&#39;seasonId&#39;] = str(season) df = df.sort_values(&#39;gameDate&#39;, axis=0).reset_index(drop=True) rolling = df.groupby([&#39;teamId&#39;]).apply(rolling_aggregate, 3) teamLU = dict(zip(df[&#39;teamId&#39;], df[&#39;teamFullName&#39;])) schedule = df.groupby([&#39;gameId&#39;, &#39;gameDate&#39;]).apply(home_road, teamLU) data[season] = {&#39;raw_data&#39;:df, &#39;rolling&#39;:rolling, &#39;schedule&#39;:schedule, &#39;teamLU&#39; : teamLU} return data . raw_data = get_gameData(2014, 5) data = process_data(raw_data) . Number of games grabbed for 20142015 = 2460. Total = 2460 Number of games grabbed for 20152016 = 2460. Total = 4920 Number of games grabbed for 20162017 = 2460. Total = 7380 Number of games grabbed for 20172018 = 2542. Total = 9922 Number of games grabbed for 20182019 = 2542. Total = 12464 . def pretty(d, indent=0): for key, value in d.items(): print(&#39; t&#39; * indent + str(key)) if isinstance(value, dict): if key == &quot;teamLU&quot;: print(&#39; t&#39; * (indent+1) + f&quot;Dictionary: {len(value)}&quot;) else: pretty(value, indent+1) elif isinstance(value, pd.DataFrame): print(&#39; t&#39; * (indent+1) + f&quot;DataFrame: {value.shape}&quot;) pretty(data) . 20142015 raw_data DataFrame: (2460, 28) rolling DataFrame: (2460, 16) schedule DataFrame: (1230, 4) teamLU Dictionary: 30 20152016 raw_data DataFrame: (2460, 28) rolling DataFrame: (2460, 16) schedule DataFrame: (1230, 4) teamLU Dictionary: 30 20162017 raw_data DataFrame: (2460, 28) rolling DataFrame: (2460, 16) schedule DataFrame: (1230, 4) teamLU Dictionary: 30 20172018 raw_data DataFrame: (2542, 28) rolling DataFrame: (2542, 16) schedule DataFrame: (1271, 4) teamLU Dictionary: 31 20182019 raw_data DataFrame: (2542, 28) rolling DataFrame: (2542, 16) schedule DataFrame: (1271, 4) teamLU Dictionary: 31 . data[&#39;20142015&#39;][&#39;raw_data&#39;].head() . faceoffWinPct gameDate gameId gamesPlayed goalsAgainst goalsAgainstPerGame goalsFor goalsForPerGame homeRoad losses opponentTeamAbbrev otLosses penaltyKillNetPct penaltyKillPct pointPct points powerPlayNetPct powerPlayPct regulationAndOtWins shotsAgainstPerGame shotsForPerGame teamFullName teamId ties wins winsInRegulation winsInShootout seasonId . 0 0.385714 | 2014-10-08 | 2014020003 | 1 | 2 | 2.0 | 4 | 4.0 | R | 0 | CGY | 0 | 1.00 | 1.00 | 1.0 | 2 | 0.333333 | 0.333333 | 1 | 25.0 | 33.0 | Vancouver Canucks | 23 | None | 1 | 1 | 0 | 20142015 | . 1 0.408450 | 2014-10-08 | 2014020004 | 1 | 4 | 4.0 | 0 | 0.0 | H | 1 | SJS | 0 | 0.75 | 0.75 | 0.0 | 0 | 0.000000 | 0.000000 | 0 | 30.0 | 34.0 | Los Angeles Kings | 26 | None | 0 | 0 | 0 | 20142015 | . 2 0.591549 | 2014-10-08 | 2014020004 | 1 | 0 | 0.0 | 4 | 4.0 | R | 0 | LAK | 0 | 1.00 | 1.00 | 1.0 | 2 | 0.250000 | 0.250000 | 1 | 34.0 | 30.0 | San Jose Sharks | 28 | None | 1 | 1 | 0 | 20142015 | . 3 0.409836 | 2014-10-08 | 2014020002 | 1 | 2 | 2.0 | 1 | 1.0 | R | 1 | BOS | 0 | 0.50 | 0.50 | 0.0 | 0 | 0.000000 | 0.000000 | 0 | 33.0 | 20.0 | Philadelphia Flyers | 4 | None | 0 | 0 | 0 | 20142015 | . 4 0.412698 | 2014-10-08 | 2014020001 | 1 | 4 | 4.0 | 3 | 3.0 | H | 1 | MTL | 0 | 1.00 | 1.00 | 0.0 | 0 | 0.333333 | 0.333333 | 0 | 32.0 | 27.0 | Toronto Maple Leafs | 10 | None | 0 | 0 | 0 | 20142015 | . data[&#39;20182019&#39;][&#39;schedule&#39;].head() . home road homeName roadName . gameId gameDate . 2018020001 2018-10-03 10 | 8 | Toronto Maple Leafs | Montréal Canadiens | . 2018020002 2018-10-03 15 | 6 | Washington Capitals | Boston Bruins | . 2018020003 2018-10-03 23 | 20 | Vancouver Canucks | Calgary Flames | . 2018020004 2018-10-03 28 | 24 | San Jose Sharks | Anaheim Ducks | . 2018020005 2018-10-04 7 | 6 | Buffalo Sabres | Boston Bruins | . import pickle pickle.dump( data, open( &quot;data.p&quot;, &quot;wb&quot; ) ) .",
            "url": "https://maddran.github.io/fastpages-blog/2021/01/07/nhl_pred.html",
            "relUrl": "/2021/01/07/nhl_pred.html",
            "date": " • Jan 7, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://maddran.github.io/fastpages-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://maddran.github.io/fastpages-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://maddran.github.io/fastpages-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://maddran.github.io/fastpages-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}